/*
** Copyright (C) 2020 Jihuan Tian <jihuan_tian@hotmail.com>
**  
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
**  
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
**  
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software
** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
**  
*/

kill(all)$
load("draw")$
load("f90")$
load("./color_map.mac")$
load(stringproc)$
load("./fem.mac")$
load("./tex_format.mac")$
load("./gauss_quadrature.mac")$

enable_drawing : true$
enable_printing : true$

/* Declaration of the noun form of global coordinates. */
X : ['x, 'y, 'z]$
/* Declaration of the noun form of local coordinates. */
chi : ['xi, 'eta, 'zeta]$

/* ************************************************ */
/* Generate Lagrange polynomials on 1D line */
/* ************************************************ */

/* Maximum 1D Lagrange polynomial order to be generated. */
lagrange_1D_max_order : 5$
lagrange_1D_cell : [-1, 1]$
/* 1D Lagrange nodes in the reference cell */
lagrange_1D_nodes : makelist(GenLagrangeNodes1D(i, lagrange_1D_cell), i, 1, lagrange_1D_max_order)$
/* 1D Lagrange polynomials */
lagrange_bases_1D: makelist(GenLagrangeBases1D(i, lagrange_1D_cell, chi[1]), i, 0, lagrange_1D_max_order)$
/* Generate latex code for export. */
makelist(SplitTeX(GenDisplayTex(lagrange_bases_1D[i])), i, 1, lagrange_1D_max_order);
     
/* Plot the Lagrange polynomials */
/* Note:
   1. Font name should be explicitly specified in order to set the font size.
   2. When draw into a file, the terminal should be selected as eps, because at present libgd (at least on Cygwin) does not support ttf scalable fonts.
   3. Note the difference between axis ranges and the domain for evaluating the function.
*/
if enable_drawing
then
  for i : 0 step 1 thru lagrange_1D_max_order
  do
    block([],
          apply(draw2d, makelist([font = "Helvetica", font_size = 20, color = clist[j], line_type = solid, line_width = 2, grid = true, title = concat("Lagrange polynomials with order ", i), explicit(lagrange_bases_1D[i + 1][j], chi, lagrange_1D_cell[1], lagrange_1D_cell[2])], j, 1, length(lagrange_bases_1D[i + 1]))),
          if enable_printing
          then
            draw_file(terminal = png, dimensions = [1200, 1000], file_name = concat("lagrange-polynomial-1d-order-", i))
         )$

/* ***************************************************** */
/* Generate Lagrange polynomials on 2D rectangle */
/* ***************************************************** */

/* Maximum 2D Lagrange polynomial to be generated */
lagrange_2D_max_order : 3$
lagrange_2D_max_orders : [lagrange_2D_max_order, lagrange_2D_max_order]$
lagrange_2D_x_range : [-1, 1]$
lagrange_2D_y_range : [-1, 1]$

/* 2D Lagrange nodes in the reference cell */
lagrange_2D_nodes : makelist(GenLagrangeNodes2D(lagrange_2D_max_orders, lagrange_2D_x_range, lagrange_2D_y_range))$
lagrange_bases_2D : makelist(SplitTeX(GenDisplayTex(GenLagrangeBases2D([i, i], lagrange_2D_x_range, lagrange_2D_y_range, [chi[1], chi[2]]))), i, 0, lagrange_2D_max_order);

/* Plot 2D Lagrange polynomials on rectangle cell with the default view angle [60, 30] */
if enable_drawing
then
  for i : 0 step 1 thru lagrange_2D_max_order
  do
    for j : 1 step 1 thru length(lagrange_bases_2D[i + 1])
    do
      block([],
            draw3d(enhanced3d = [z, x, y, z], palette = color_map_rainbow, font = "Helvetica", font_size = 20, title = concat("Lagrange polynomials with order ", i, " #", j), explicit(lagrange_bases_2D[i + 1][j], x, lagrange_2D_x_range[1], lagrange_2D_x_range[2], y, lagrange_2D_y_range[1], lagrange_2D_y_range[2])),
            if enable_printing
            then
              draw_file(terminal = eps, dimensions = [1200, 1000], file_name = concat("lagrange-polynomial-2d-order-", i, "#", j))
           )$

/* Plot 2D Lagrange polynomials on rectangle cell viewed from top */
if enable_drawing
then
  for i : 0 step 1 thru lagrange_2D_max_order
  do
    for j : 1 step 1 thru length(lagrange_bases_2D[i + 1])
    do
      block([],
            draw3d(enhanced3d = [z, x, y, z], palette = color_map_rainbow, view = map, proportional_axes = xyz, xu_grid = 100, yv_grid = 100, font = "Helvetica", font_size = 20, title = concat("Lagrange polynomials with order ", i, " #", j), explicit(lagrange_bases_2D[i + 1][j], x, lagrange_2D_x_range[1], lagrange_2D_x_range[2], y, lagrange_2D_y_range[1], lagrange_2D_y_range[2])),
            if enable_printing
            then
              draw_file(terminal = eps, dimensions = [1200, 1000], file_name = concat("lagrange-polynomial-2d-order-", i, "#", j, "-top-view"))
           )$

/* Plot 2D Lagrange polynomials on rectangle cell view from top and generate
animated gif */
if (enable_drawing and enable_printing)
then
  for i : 0 step 1 thru lagrange_2D_max_order
  do
    apply(draw, [delay = 200,
                 file_name = "lagrange-polynomial-2d-order",
                 terminal = 'animated_gif,
                 dimensions = [1200, 1000],
                 makelist(gr3d(enhanced3d = [z, x, y, z], palette = color_map_rainbow, view = map, proportional_axes = xyz, xu_grid = 100, yv_grid = 100, font = "Helvetica", font_size = 20, title = concat("Lagrange polynomials with order ", i, " #", j), explicit(lagrange_bases_2D[i + 1][j], x, lagrange_2D_x_range[1], lagrange_2D_x_range[2], y, lagrange_2D_y_range[1], lagrange_2D_y_range[2])), j, 1, length(lagrange_bases_2D[i + 1]))])$

/* **************************************************** */
/* Generate Lagrange polynomials on 2D triangle */
/* **************************************************** */
lagrange_tri_order : 4$
lagrange_tri_node_num : TriNumOfNodes(lagrange_tri_order)$

/* A list of nodes the real flat triangle which are mapped to the nodes in 4th order
reference cell. */
tri_node_list :[[0, 0, 5],
                [0.43, 0.58, 3.75],
                [0.86, 1.15, 2.5],
                [1.29, 1.73, 1.25],
                [1.72, 2.31, 0],
                [0.97, -2.54, 3.75],
                [1.4, -1.96, 2.5],
                [1.83, -1.39, 1.25],
                [2.26, -0.81, 0],
                [1.94, -5.08, 2.5],
                [2.37, -4.5, 1.25],
                [2.8, -3.92, 0],
                [2.91, -7.62, 1.25],
                [3.34, -7.04, 0],
                [3.88, -10.15, 0]
               ];

if enable_drawing
then
  draw3d(point_type = filled_circle, point_size=3, color=red, points(tri_node_list))$

/* A list of nodes the real distorted triangle which are mapped to the nodes in 4th order
reference cell. */
tri_node_list_distorted :[[-4.01406, 9.94323, 4.5],
                          [-3.65318, 6.16233, 3.8],
                          [-2.29768, 2.279, 3],
                          [-0.282742, -0.981539, 3.8],
                          [2.8038, -4.13172, 4.5],
                          [-6.69391, 6.71186, 3.8],
                          [-5.41167, 2.64535, 3],
                          [-3.14029, -1.5677, 3],
                          [-0.575822, -4.82824, 3.8],
                          [-8.41576, 3.48796, 3],
                          [-6.40083, -0.725094, 2],
                          [-3.87299, -4.82824, 3],
                          [-9.58809, 0.00761196, 2],
                          [-7.13353, -4.24207, 1],
                          [-10.0638, -3.29188, 1]
                         ]$

if enable_drawing
then
  draw3d(point_type = filled_circle, point_size=3, color=red, points(tri_node_list_distorted))$

/* Area coordinates of different orders on the reference triangle */
tri_area_coords : makelist(GenTriaNodes(i), i, 0, lagrange_tri_order)$

/* Generate shape functions on triangle */
tri_shape_functions : makelist(TriShapeFuncs(chi, i), i, 0, lagrange_tri_order)$

/* Plot Lagrange polynomials on 2D triangle with the default view angle [60, 30] */
if enable_drawing
then
  for i : 1 step 1 thru lagrange_tri_node_num
  do
    block([],
          shape_for_plot : subst(zeta = 1 - xi - eta, tri_shape_functions[lagrange_tri_order + 1][i]),
          draw3d(enhanced3d = [z, x, y, z], palette = color_map_rainbow, font = "Helvetica", font_size = 20, xu_grid = 100, yv_grid = 100, title = concat("Lagrange polynomials with order ", lagrange_tri_order, " #", i), explicit(block([], if eta > (1 - xi) then inf else shape_for_plot), xi, 0, 1, eta, 0, 1)),
          if enable_printing
          then
            draw_file(terminal = eps, dimensions = [1200, 1000], file_name = concat("lagrange-polynomial-tri-order-", lagrange_tri_order, "#", i))
         )$

/* Plot Lagrange polynomials on 2D triangle with top view */
if enable_drawing
then
  for i : 1 step 1 thru lagrange_tri_node_num
  do
    block([],
          shape_for_plot : subst(zeta = 1 - xi - eta, tri_shape_functions[lagrange_tri_order + 1][i]),
          draw3d(enhanced3d = [z, x, y, z], palette = color_map_rainbow, view = map, font = "Helvetica", font_size = 20, proportional_axes = xyz, xu_grid = 100, yv_grid = 100, title = concat("Lagrange polynomials with order ", lagrange_tri_order, " #", i), explicit(block([], if eta > (1 - xi) then inf else shape_for_plot), xi, 0, 1, eta, 0, 1)),
          if enable_printing
          then
            draw_file(terminal = eps, dimensions = [1200, 1000], file_name = concat("lagrange-polynomial-tri-order-", lagrange_tri_order, "#", i, "-top-view"))
         )$

/* Create the map from area coordinate to global coordinate, which can be used
   to plot the real triangle that may be distorted. */
distorted_tri_area_to_global_map : AreaToGlobalMap(tri_node_list_distorted, tri_shape_functions[lagrange_tri_order + 1])$

/* ******************************* */
/* Calculate Jacobi matrix         */
/* ******************************* */

/* Generate the Jacobi matrices for shape functions with respect to area
coordinates under different shape function orders. */
tri_shape_func_jacobi_matrices : makelist(SimplexShapeFunctionJacobiMat(tri_shape_functions[i], chi), i, 1, lagrange_tri_order + 1)$

/* Generate Jacobi matrix on triangle */
Jyz : SimplexGlobalJacobiMat(tri_shape_functions[lagrange_tri_order + 1], chi, tri_node_list, [2, 3])$
Jzx : SimplexGlobalJacobiMat(tri_shape_functions[lagrange_tri_order + 1], chi, tri_node_list, [3, 1])$
Jxy : SimplexGlobalJacobiMat(tri_shape_functions[lagrange_tri_order + 1], chi, tri_node_list, [1, 2])$
sum_of_2d_jacobis : abs(determinant(Jyz)) + abs(determinant(Jzx)) + abs(determinant(Jxy))$
surface_metric : sqrt(determinant(Jyz)**2 + determinant(Jzx)**2 + determinant(Jxy)**2)$

/* Generate Gauss quadrature points and weights. */
gauss_points_tri : GenGaussPointsTri5th()$
gauss_weights_tri : GenGaussWeightsTri5th()$

/* Calcualte the triangle area by integration over the reference cell using Gauss quadrature */
tri_area : 0$
for i : 1 step 1 thru length(gauss_points_tri)
  do
    tri_area : tri_area + subst([xi = gauss_points_tri[i][1], eta = gauss_points_tri[i][2], zeta = gauss_points_tri[i][3]], surface_metric) * gauss_weights_tri[i]$

tri_area : ev(tri_area / 2, numer);

surface_metric : subst(zeta = 1 - xi - eta, surface_metric)$
if enable_drawing
then
  draw3d(enhanced3d = [z, x, y, z], proportional_axes = xy, xrange = [0, 1], yrange = [0, 1], palette = color_map_rainbow, view = map, explicit(if xi > 1 - eta then 0 else surface_metric, xi, 0, 1, eta, 0, 1))$

/* Generate Jacobi matrix on 2D distorted triangle */
Jyz : SimplexGlobalJacobiMat(tri_shape_functions[lagrange_tri_order + 1], chi, tri_node_list_distorted, [2, 3])$
Jzx : SimplexGlobalJacobiMat(tri_shape_functions[lagrange_tri_order + 1], chi, tri_node_list_distorted, [3, 1])$
Jxy : SimplexGlobalJacobiMat(tri_shape_functions[lagrange_tri_order + 1], chi, tri_node_list_distorted, [1, 2])$
sum_of_2d_jacobis : abs(determinant(Jyz)) + abs(determinant(Jzx)) + abs(determinant(Jxy))$
surface_metric : sqrt(determinant(Jyz)**2 + determinant(Jzx)**2 + determinant(Jxy)**2)$

surface_metric_on_xi_eta : subst(zeta = 1 - xi - eta, surface_metric)$
if enable_drawing
then
  draw3d(enhanced3d = [z, x, y, z], proportional_axes = xy, xrange = [0, 1], yrange = [0, 1], palette = color_map_rainbow_reversed, view = map, explicit(if xi > 1 - eta then 0 else surface_metric_on_xi_eta, xi, 0, 1, eta, 0, 1))$

/* Generate Gauss quadrature points and weights. */
gauss_points_tri : GenGaussPointsTri5th()$
gauss_weights_tri : GenGaussWeightsTri5th()$

/* Calcualte the triangle area by integration over the reference cell using Gauss quadrature */
tri_area : 0$
for i : 1 step 1 thru length(gauss_points_tri)
  do
    tri_area : tri_area + subst([xi = gauss_points_tri[i][1], eta = gauss_points_tri[i][2], zeta = gauss_points_tri[i][3]], surface_metric) * gauss_weights_tri[i]$

tri_area : tri_area / 2;